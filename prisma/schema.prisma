// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String?
  email String @unique
  password String
  address String?
  province_id Int?
  city_id Int?
  zip_code Int?
  role Role @default(user)
  phone_number String?
  photo String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  province Province? @relation(fields: [province_id], references: [id], onUpdate: Cascade, onDelete: Cascade) 
  city City? @relation(fields: [city_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cart Cart[]
  orders Orders[]
}

model Province {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cities City[]
  users User[]
  Warehouse Warehouse[]
}

model City {
  id Int @id @default(autoincrement())
  province_id Int
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  province Province @relation(fields: [province_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  users User[]
  warehouses Warehouse[]
}

model Product {
  id Int @id @default(autoincrement())
  name String @unique
  description String? @db.Text
  price Decimal
  photo String?
  slug String @unique
  weight Int
  sku String @unique
  category_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  category Category @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Product_Warehouses Product_Warehouse[]
  cart_items Cart_items[]
  order_products Order_products[]
}

model Product_Warehouse {
  id Int @id @default(autoincrement())
  product_id Int
  warehouse_id Int
  stock Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouse_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Warehouse {
  id Int @id @default(autoincrement())
  name String
  city_id Int 
  province_id Int
  address String
  zip_code Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  city City @relation(fields: [city_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  province Province @relation(fields: [province_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Product_Warehouses Product_Warehouse[]
  cart Cart[]
}

model Category {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]
}

model Cart {
  id Int @id @default(autoincrement())
  user_id Int
  warehouse_id Int
  shipping_cost Int
  total_price Int
  net_price Int
  shipping_method String?
  courier String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouse_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cart_items Cart_items[]
}

model Cart_items {
  id Int @id @default(autoincrement())
  cart_id Int
  product_id Int
  quantity Int
  price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart Cart @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Order_products {
  id Int @id @default(autoincrement())
  product_id Int
  order_id Int
  quantity Int
  price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order Orders @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Orders {
  id Int @id @default(autoincrement())
  user_id Int
  warehouse_id Int
  shipping_cost Int
  payment_method String?
  bank_name String?
  proof_of_payment String?
  total_price Int
  midtrans_data Json?
  net_price Int
  shipping_method String?
  courier String?
  status OrderStatus
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order_products Order_products[]
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  processed
  shipped
  delivered
  cancelled
}
